# -*- coding: utf-8 -*-
"""Compare_NIFTY_Indices_Return_Divergence.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mGIfu5WoltmQJnd6dd-8GFlm_s3Npj_c

"""

#importing libraries
import pandas as pd
import numpy as np
import plotly.graph_objects as go
import plotly.io as pio
import os

download = pd.DataFrame()
pio.renderers.default = 'png'
Year = [1,3,5]


HISTORICAL_DATA_DIR = os.path.join(os.path.dirname(__file__), '..', 'Historical_Close')

# Calculating Daily, 1 year, 3 year and 5 year returns
def CalReturns(df):
  df['Daily Returns'] = np.log(df['Close'] / df['Close'].shift(1))
  df['1 Year Returns'] = np.log(df['Close'] / df['Close'].shift(252))
  df['3 Year Returns'] = np.log(df['Close'] / df['Close'].shift(756))
  df['5 Year Returns'] = np.log(df['Close'] / df['Close'].shift(1260))
  

#Return Divergence
def ReturnDivergence(INDEX,BENCHMARK,index,benchmark):
  Plot_List = [] 
 
  InnerJoint = pd.merge(INDEX,BENCHMARK,on = "Date", how = "inner")
  for n in Year:
    InnerJoint["%s Year Return Divergence" %str(n)] = InnerJoint["%s Year Returns_x" %str(n)] - InnerJoint["%s Year Returns_y" %str(n)]
    mean = np.mean(InnerJoint["%s Year Return Divergence" %str(n)])
    std = np.std(InnerJoint["%s Year Return Divergence" %str(n)])
    InnerJoint["%s Year Return Divergence std" %str(n)] = (InnerJoint["%s Year Return Divergence" %str(n)]-mean)/std
    InnerJoint["Future %s year excess returns" %str(n)] = -1*((InnerJoint['Close_x'].shift(-252*n) - InnerJoint['Close_x'])/(InnerJoint['Close_x'])) + ((InnerJoint['Close_y'].shift(-252*n) - InnerJoint['Close_y'])/(InnerJoint['Close_y']))
    Plot_List.append(plot_dash(InnerJoint,n,benchmark,index))

  return Plot_List


def LastValueDeviation(INDEX,BENCHMARK):
  
  InnerJoint = pd.merge(INDEX,BENCHMARK,on = "Date", how = "inner")
  deviations = []
  for n in Year:
    InnerJoint["%s Year Return Divergence" %str(n)] = InnerJoint["%s Year Returns_x" %str(n)] - InnerJoint["%s Year Returns_y" %str(n)]
    mean = np.mean(InnerJoint["%s Year Return Divergence" %str(n)])
    std = np.std(InnerJoint["%s Year Return Divergence" %str(n)])
    InnerJoint["%s Year Return Divergence std" %str(n)] = (InnerJoint["%s Year Return Divergence" %str(n)]-mean)/std
    InnerJoint["Future %s year excess returns" %str(n)] = -1*((InnerJoint['Close_x'].shift(-252*n) - InnerJoint['Close_x'])/(InnerJoint['Close_x'])) + ((InnerJoint['Close_y'].shift(-252*n) - InnerJoint['Close_y'])/(InnerJoint['Close_y']))
    deviations.append(InnerJoint.iloc[-1]["%s Year Return Divergence std" %str(n)])

  return deviations


def plot_dash(InnerJoint, n,benchmark,index):
    mean = np.mean(InnerJoint['%s Year Return Divergence' % str(n)])
    std = np.std(InnerJoint['%s Year Return Divergence' % str(n)])

    InnerJoint['%s Year Return Divergence mean' % str(n)] = (InnerJoint['%s Year Return Divergence' % str(n)].cumsum()) / (InnerJoint['%s Year Return Divergence' % str(n)].notna().cumsum())

    # Create the figure and traces
    fig = go.Figure()

    # Add the line trace for the data
    fig.add_trace(go.Scatter(x=InnerJoint['Date'], y=InnerJoint['%s Year Return Divergence' % str(n)], name='Data'))

    # Add the horizontal lines
    fig.add_hline(y=mean, line_color='black', name='Mean')
    fig.add_hline(y=mean + std, line_dash='dash', line_color='orange', name='1 SD')
    fig.add_hline(y=mean - std, line_dash='dash', line_color='orange', name='-1 SD')
    fig.add_hline(y=mean + 2 * std, line_dash='dash', line_color='red', name='2 SD')
    fig.add_hline(y=mean - 2 * std, line_dash='dash', line_color='red', name='-2 SD')

    # Update the layout
    fig.update_layout(
        title='%s - %s (%d year Returns)' % (index, benchmark, n),
        xaxis_title='Years',
        yaxis_title='Return Divergence',
        yaxis_tickformat='%'
    )
    return fig

def plot_charts(index):
    Index = pd.read_csv(os.path.join(HISTORICAL_DATA_DIR,f'{index}_Data.csv'))
    Index['Date'] = pd.to_datetime(Index['Date']).dt.date
    Index = Index.drop_duplicates(subset='Date', keep="first")
    Index.sort_values(by = "Date", inplace = True)
    
    fig = go.Figure()

    # Add the line trace for the data
    fig.add_trace(go.Scatter(x=Index['Date'], y=Index['Close'], name='Closing Price'))
    
    # Update the layout
    fig.update_layout(
        title=f'{index}',
        xaxis_title='Years',
        yaxis_title='Closing Price',
    )
    
    return fig
    

def clean_data(index,benchmark):
    Benchmark = pd.read_csv(os.path.join(HISTORICAL_DATA_DIR,f'{benchmark}_Data.csv'))
    Index = pd.read_csv(os.path.join(HISTORICAL_DATA_DIR,f'{index}_Data.csv'))

    #Date formatting
    Benchmark['Date'] = pd.to_datetime(Benchmark['Date']).dt.date
    Index['Date'] = pd.to_datetime(Index['Date']).dt.date

    # Removing Duplicate Data
    Benchmark = Benchmark.drop_duplicates(subset='Date', keep="first")
    Index = Index.drop_duplicates(subset='Date', keep="first")

    #Sorting by Dates
    Benchmark.sort_values(by = "Date", inplace = True)
    Index.sort_values(by = "Date", inplace = True)
    
    CalReturns(Benchmark)
    CalReturns(Index)
    
    return Index,Benchmark
  
def getLastDeviation(index,benchmark):
  
  Index,Benchmark = clean_data(index,benchmark)
  return LastValueDeviation(Index,Benchmark)
  

def plot_return_divergence(index,benchmark):
    
    Index,Benchmark = clean_data(index,benchmark)
    plots = [plot for plot in ReturnDivergence(Index,Benchmark,index,benchmark)]
  
    return plots


